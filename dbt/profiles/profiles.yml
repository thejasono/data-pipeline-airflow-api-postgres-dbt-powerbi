# profiles.yml defines how dbt connects to your database (target, credentials, and default schema).  
# Leaving `schema` blank creates top-level `staging` and `analytics` schemas; setting it to `public` prefixes them (`public_staging`, `public_analytics`).

api_bi_profile:
  target: dev  # Default profile target
  outputs:  # Connection settings per target
    dev:  # Development environment
      type: postgres  # Adapter type (PostgreSQL)
      host: postgres  # Database host
      user: "{{ env_var('POSTGRES_USER') }}"  # Username from env var
      password: "{{ env_var('POSTGRES_PASSWORD') }}"  # Password from env var
      port: 5432  # Database port
      dbname: "{{ env_var('POSTGRES_DB') }}"  # Database name
      schema: "public"  # Base schema name; dbt appends folder-specific suffixes (staging →
                        # `public_staging`, marts → `public_analytics`).
                        #
                        # Why set a base schema?
                        # - Keeps all dbt-created objects grouped under a consistent prefix.
                        # - Avoids cluttering the top-level namespace with plain `staging` /
                        #   `analytics` schemas.
                        # - Works with the initialization SQL, which now creates
                        #   `public_staging` and `public_analytics` ahead of dbt runs.
      threads: 4  # Number of threads dbt uses
